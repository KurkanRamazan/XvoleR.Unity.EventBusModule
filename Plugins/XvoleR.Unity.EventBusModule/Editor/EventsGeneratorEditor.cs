using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace XvoleR.Unity.EventBusModule.EditorScripts
{
    [CustomEditor(typeof(EventsGenerator))]
    [CanEditMultipleObjects]
    public class EventsGeneratorEditor : Editor
    {

        const string templateFile = @"/*
This file is autogenerated. Please do not edit.
*/
{0}

namespace {1}
{{
{2}
}}
";
        const string templateSubscribeAndUnsubscrib = @"
		public static void Subscribe(System.EventHandler<{0}> eventHandler)
		{{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Subscribe(eventHandler);
		}}
		public static void Unsubscribe(System.EventHandler<{0}> eventHandler)
		{{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Unsubscribe(eventHandler);
		}}
";
        public override void OnInspectorGUI()
        {
            base.OnInspectorGUI();
            if (GUILayout.Button("Generate"))
            {
                foreach (EventsGenerator eventsGenerator in serializedObject.targetObjects)
                {
                    GenerateEvents(eventsGenerator);
                }
                AssetDatabase.Refresh();
            }
        }
        public static void GenerateEvents(EventsGenerator eventsGenerator)
        {
            var filePath = Path.GetDirectoryName(AssetDatabase.GetAssetPath(eventsGenerator));
            var projectFolder = Path.GetDirectoryName(Application.dataPath);
            var outputDirectory = Path.Combine(projectFolder, filePath);
            GenerateEvents(outputDirectory, eventsGenerator);
        }
        private static void GenerateEvents(string outputDirectory, EventsGenerator eventsGenerator)
        {
            //var filePath = Path.GetDirectoryName(AssetDatabase.GetAssetPath(eventsGenerator));
            //var projectFolder = Path.GetDirectoryName(Application.dataPath);
            //var outputDirectory = Path.Combine(projectFolder, filePath);
            //var sb = new StringBuilder();
            //for (int i = 0; i < o.eventNames.Length; i++)
            //{
            //    var arrElement = o.eventNames[i];
            //    sb.AppendFormat(templateClass, arrElement);
            //}
            //var outputContent = string.Format(templateFile, o._namespace, sb.ToString());
            //File.WriteAllText(absoluteOutputFilePath, outputContent, Encoding.UTF8);
            foreach (var eventsDefinition in eventsGenerator.events)
            {
                var tOutputDirectory = Path.Combine(outputDirectory, string.IsNullOrWhiteSpace(eventsDefinition.prefix) ? string.Empty : eventsDefinition.prefix);
                if (!Directory.Exists(tOutputDirectory))
                {
                    Directory.CreateDirectory(tOutputDirectory);
                }
                var outputFileName = eventsDefinition.name;
                var absoluteOutputFilePath = Path.Combine(tOutputDirectory, outputFileName + ".cs");


                StringBuilder sbClass = new StringBuilder();
                for (int i = 0; i < eventsDefinition.eventNames.Length; i++)
                {
                    var eventName = eventsDefinition.eventNames[i];
                    if (!string.IsNullOrWhiteSpace(eventName.description))
                    {
                        sbClass
                            .AppendFormat("\t/**")
                            .AppendLine()
                            .AppendLine(eventName.description)
                            .AppendLine()
                            .Append("\t*/")
                            .AppendLine()
                            ;
                    }
                    sbClass
                        .AppendFormat("\tpublic class {0} : System.EventArgs", eventName.name)
                        .AppendLine()
                        .Append("\t{")
                        .AppendLine()
                        ;
                    if (eventName.singleton)
                    {
                        sbClass.AppendFormat("\t\tprivate static {0} Instance = new {0}();", eventName.name)
                            .AppendLine()
                            ;
                    }
                    sbClass.AppendFormat("\t\t{1} {0}() {{ }}", eventName.name, eventName.singleton ? "private" : "public")
                        .AppendLine()
                        ;
                    for (int j = 0; j < eventName.parameters.Length; j++)
                    {
                        var p = eventName.parameters[j];
                        var pname = char.ToUpperInvariant(p.name[0]) + p.name.Substring(1);
                        sbClass.AppendFormat("\t\tpublic {0} {1} {{ get; {2}set; }}", p.type, pname, !eventName.singleton ? string.Empty : "private ")
                            .AppendLine()
                            ;
                    }
                    if (!eventName.singleton)
                    {
                        AppendTemplate_Singleton(sbClass, eventName);
                    }
                    else
                    {
                        AppendTemplate_Publish(sbClass, eventName);
                        //AppendTemplate_Routine(sbClass, eventName);

                    }
                    sbClass.AppendFormat(templateSubscribeAndUnsubscrib, eventName.name);
                    sbClass
                       .Append("\t}")
                       .AppendLine()
                       ;
                }



                string outputContent = string.Format(templateFile, Template_Using(eventsGenerator), eventsDefinition._namespace, sbClass.ToString());
                File.WriteAllText(absoluteOutputFilePath, outputContent, Encoding.UTF8);
            }
        }

        private static string Template_Using(EventsGenerator eventsGenerator)
        {
            return string.Join(System.Environment.NewLine, eventsGenerator.usings.Select(u => (u ?? string.Empty).Trim()).Where(u => !string.IsNullOrEmpty(u)).Select(u => string.Format("using {0};", u)));
        }

        private static void AppendTemplate_Routine(StringBuilder sbClass, EventsGenerator.EventNameDefinition eventName)
        {
            sbClass.AppendFormat("\t\tpublic static UnityEngine.Coroutine FireEventAfterEndOfFrame(object sender", eventName.name);
            for (var j = 0; j < eventName.parameters.Length; j++)
            {
                var p = eventName.parameters[j];
                var pname = char.ToLowerInvariant(p.name[0]) + p.name.Substring(1);
                sbClass.AppendFormat(", {0} {1}", p.type, pname)
                ;
            }
            sbClass
                .AppendLine(")")
                .Append("\t\t{")
                .AppendLine()
                ;
            for (var j = 0; j < eventName.parameters.Length; j++)
            {
                var p = eventName.parameters[j];
                var pname1 = char.ToUpperInvariant(p.name[0]) + p.name.Substring(1);
                var pname2 = char.ToLowerInvariant(p.name[0]) + p.name.Substring(1);
                sbClass.AppendFormat("\t\t\tInstance.{0} = {1};", pname1, pname2)
                    .AppendLine()
                ;
            }
            sbClass
                .Append("\t\t\treturn XvoleR.Unity.Extensions.RunCoroutine.Run(RoutineFireEventAfterEndOfFrame(sender));")
                .AppendLine()
                ;
            sbClass
                .Append("\t\t}")
                .AppendLine()
                ;
            //sbClass.AppendFormat(templateRoutine);
        }

        private static void AppendTemplate_Publish(StringBuilder sbClass, EventsGenerator.EventNameDefinition eventName)
        {
            sbClass.AppendFormat("\t\tpublic static void FireEvent(object sender", eventName.name);
            for (var j = 0; j < eventName.parameters.Length; j++)
            {
                var p = eventName.parameters[j];
                var pname = char.ToLowerInvariant(p.name[0]) + p.name.Substring(1);
                sbClass.AppendFormat(", {0} {1}", p.type, pname)
                ;
            }
            sbClass
                .AppendLine(")")
                .Append("\t\t{")
                .AppendLine()
                ;
            for (var j = 0; j < eventName.parameters.Length; j++)
            {
                var p = eventName.parameters[j];
                var pname1 = char.ToUpperInvariant(p.name[0]) + p.name.Substring(1);
                var pname2 = char.ToLowerInvariant(p.name[0]) + p.name.Substring(1);
                sbClass.AppendFormat("\t\t\tInstance.{0} = {1};", pname1, pname2)
                    .AppendLine()
                ;
            }
            sbClass
                .Append("\t\t\tXvoleR.Unity.EventBusModule.EventBusFactory.Default.Publish(sender, Instance);")
                .AppendLine()
                ;
            sbClass
                .Append("\t\t}")
                .AppendLine()
                ;
        }

        private static void AppendTemplate_Singleton(StringBuilder sbClass, EventsGenerator.EventNameDefinition eventName)
        {
            sbClass.AppendFormat("\t\tpublic static void FireEvent(object sender, {0} value)", eventName.name)
                                        .AppendLine()
                                        .Append("\t\t{")
                                        .AppendLine()
                                        .Append("\t\t\tXvoleR.Unity.EventBusModule.EventBusFactory.Default.Publish(sender, value);")
                                        .AppendLine()
                                        .Append("\t\t}")
                                        .AppendLine()
                                        ;
        }
    }
}