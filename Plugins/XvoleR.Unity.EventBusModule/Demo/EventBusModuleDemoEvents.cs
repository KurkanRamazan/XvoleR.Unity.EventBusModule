/*
This file is autogenerated. Please do not edit.
*/


namespace XvoleR.Unity.EventBusModule.Demo
{
	public class ScoreChangedEvent : System.EventArgs
	{
		private static ScoreChangedEvent Instance = new ScoreChangedEvent();
		private ScoreChangedEvent() { }
		public static void FireEvent(object sender)
		{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Publish(sender, Instance);
		}

		public static void Subscribe(System.EventHandler<ScoreChangedEvent> eventHandler)
		{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Subscribe(eventHandler);
		}
		public static void Unsubscribe(System.EventHandler<ScoreChangedEvent> eventHandler)
		{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Unsubscribe(eventHandler);
		}
	}
	public class ScoreChangerEvent : System.EventArgs
	{
		private static ScoreChangerEvent Instance = new ScoreChangerEvent();
		private ScoreChangerEvent() { }
		public int Difference { get; private set; }
		public static void FireEvent(object sender, int difference)
		{
			Instance.Difference = difference;
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Publish(sender, Instance);
		}

		public static void Subscribe(System.EventHandler<ScoreChangerEvent> eventHandler)
		{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Subscribe(eventHandler);
		}
		public static void Unsubscribe(System.EventHandler<ScoreChangerEvent> eventHandler)
		{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Unsubscribe(eventHandler);
		}
	}
	public class ScoreRequestEvent : System.EventArgs
	{
		private static ScoreRequestEvent Instance = new ScoreRequestEvent();
		private ScoreRequestEvent() { }
		public static void FireEvent(object sender)
		{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Publish(sender, Instance);
		}

		public static void Subscribe(System.EventHandler<ScoreRequestEvent> eventHandler)
		{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Subscribe(eventHandler);
		}
		public static void Unsubscribe(System.EventHandler<ScoreRequestEvent> eventHandler)
		{
			XvoleR.Unity.EventBusModule.EventBusFactory.Default.Unsubscribe(eventHandler);
		}
	}

}
